{"version":3,"file":"rateLimiter.js","sourceRoot":"","sources":["../../src/middleware/rateLimiter.ts"],"names":[],"mappings":"AAAA,OAAO,SAAsC,MAAM,oBAAoB,CAAC;AACxE,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAGjE,6DAA6D;AAC7D,MAAM,oBAAoB,GAAG,KAAK,IAAmB,EAAE;IACnD,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QACtB,MAAM,YAAY,EAAE,CAAC;IACzB,CAAC;AACL,CAAC,CAAC;AAEF,sCAAsC;AACtC,CAAC,KAAK,IAAI,EAAE;IACR,MAAM,oBAAoB,EAAE,CAAC;AACjC,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM,OAAO,GAA4B,SAAS,CAAC;IAC/C,KAAK,EAAE,IAAI,UAAU,CAAC;QAClB,WAAW,EAAE,CAAC,GAAG,IAAc,EAAE,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC;KACpE,CAAC;IACF,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IACxB,GAAG,EAAE,GAAG;IACR,OAAO,EAAE,yDAAyD;IAClE,eAAe,EAAE,IAAI;IACrB,aAAa,EAAE,KAAK;IACpB,YAAY,EAAE,CAAC,GAAY,EAAU,EAAE;QACnC,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,qCAAqC;IAC9D,CAAC;CACJ,CAAC,CAAC;AAEH,MAAM,YAAY,GAAG,CAAC,GAAgB,EAAQ,EAAE;IAC5C,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,4CAA4C;IAC1E,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,oCAAoC;AAC1D,CAAC,CAAC;AAEF,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC","sourcesContent":["import rateLimit, { RateLimitRequestHandler } from 'express-rate-limit';\r\nimport RedisStore from 'rate-limit-redis';\r\nimport { redisClient, connectRedis } from '../utils/redisClient';\r\nimport { Request, Application } from 'express';\r\n\r\n// Ensure Redis is connected before creating the rate limiter\r\nconst ensureRedisConnected = async (): Promise<void> => {\r\n    if (!redisClient.isOpen) {\r\n        await connectRedis();\r\n    }\r\n};\r\n\r\n// Immediately ensure Redis connection\r\n(async () => {\r\n    await ensureRedisConnected();\r\n})();\r\n\r\nconst limiter: RateLimitRequestHandler = rateLimit({\r\n    store: new RedisStore({\r\n        sendCommand: (...args: string[]) => redisClient.sendCommand(args),\r\n    }),\r\n    windowMs: 15 * 60 * 1000, \r\n    max: 100, \r\n    message: 'Too many requests from this IP, please try again later.',\r\n    standardHeaders: true,\r\n    legacyHeaders: false,\r\n    keyGenerator: (req: Request): string => {\r\n        return req.ip || ''; // Ensure a string is always returned\r\n    },\r\n});\r\n\r\nconst configureApp = (app: Application): void => {\r\n    app.set('trust proxy', true); // Ensure the trust proxy setting is enabled\r\n    app.use(limiter); // Apply the rate limiter middleware\r\n};\r\n\r\nexport { limiter, configureApp };\r\n"]}
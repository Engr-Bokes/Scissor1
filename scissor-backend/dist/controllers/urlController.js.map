{"version":3,"file":"urlController.js","sourceRoot":"","sources":["../../src/controllers/urlController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { createShortUrl, getAnalytics, getUrlByShortId } from '../services/urlService';\r\nimport { UrlModel } from '../models/urlModel';\r\n\r\nexport const shortenUrl = async (req: Request, res: Response) => {\r\n    const { originalUrl, customUrl } = req.body;\r\n\r\n    const userId = req.user?.id;\r\n\r\n    if (!userId || typeof userId !== 'string') {\r\n        return res.status(400).json({ message: 'Invalid user ID in token' });\r\n    }\r\n\r\n    try {\r\n        const { shortUrl, qrCode } = await createShortUrl(originalUrl, userId, customUrl);\r\n        res.status(201).json({ shortUrl, qrCode });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Server Error', error });\r\n    }\r\n};\r\n\r\nexport const getUrlAnalytics = async (req: Request, res: Response) => {\r\n    const { code } = req.params;\r\n\r\n    try {\r\n        const analytics = await getAnalytics(code);\r\n        res.status(200).json(analytics);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Server Error', error });\r\n    }\r\n};\r\n\r\nexport const getUserUrls = async (req: Request, res: Response) => {\r\n    const userId = req.user?.id;\r\n\r\n    if (!userId || typeof userId !== 'string') {\r\n        return res.status(400).json({ message: 'Invalid user ID in token' });\r\n    }\r\n\r\n    try {\r\n        const urls = await UrlModel.find({ user: userId });\r\n        res.status(200).json(urls);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Server Error', error });\r\n    }\r\n};\r\n\r\n// Add the redirectToOriginalUrl function\r\nexport const redirectToOriginalUrl = async (req: Request, res: Response) => {\r\n    const { code } = req.params;\r\n\r\n    try {\r\n        const originalUrl = await getUrlByShortId(code);\r\n\r\n        if (originalUrl) {\r\n            res.redirect(originalUrl);\r\n        } else {\r\n            res.status(404).send('URL not found');\r\n        }\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Server Error', error });\r\n    }\r\n};\r\n"]}
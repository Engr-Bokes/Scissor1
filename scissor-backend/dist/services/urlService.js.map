{"version":3,"file":"urlService.js","sourceRoot":"","sources":["../../src/services/urlService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AACnD,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,WAAmB,EAAE,MAAc,EAAE,SAAkB,EAAE,EAAE;IAC5F,MAAM,OAAO,GAAG,SAAS,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,uBAAuB,CAAC;IAChE,MAAM,QAAQ,GAAG,GAAG,OAAO,IAAI,OAAO,EAAE,CAAC;IAEzC,MAAM,OAAO,GAAG,IAAI,QAAQ,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IAC/E,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;IAErB,MAAM,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,QAAQ,CAAC,CAAC;IAE9C,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AAChC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,IAAY,EAAE,EAAE;IAC/C,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAEtD,IAAI,GAAG,EAAE,CAAC;QACN,OAAO;YACH,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,YAAY,EAAE,GAAG,CAAC,YAAY;SACjC,CAAC;IACN,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,KAAK,EAAE,GAAW,EAAmB,EAAE;IAC1D,IAAI,CAAC;QACD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,6CAA6C,EAAE;YAC5E,MAAM,EAAE;gBACJ,IAAI,EAAE,kBAAkB,CAAC,GAAG,CAAC;gBAC7B,IAAI,EAAE,SAAS;aAClB;YACD,YAAY,EAAE,aAAa;SAC9B,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAa,CAAC;IACzC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAClD,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { UrlModel } from '../models/urlModel';\r\nimport { nanoid } from 'nanoid';\r\nimport { redisClient } from '../utils/redisClient';\r\nimport axios from 'axios';\r\n\r\nexport const createShortUrl = async (originalUrl: string, userId: string, customUrl?: string) => {\r\n    const urlCode = customUrl || nanoid(7);\r\n    const baseUrl = process.env.BASE_URL || 'http://localhost:8000';\r\n    const shortUrl = `${baseUrl}/${urlCode}`;\r\n\r\n    const urlData = new UrlModel({ originalUrl, shortUrl, urlCode, user: userId });\r\n    await urlData.save();\r\n\r\n    await redisClient.set(urlCode, originalUrl);\r\n\r\n    const qrCode = await generateQrCode(shortUrl);\r\n\r\n    return { shortUrl, qrCode };\r\n};\r\n\r\nexport const getAnalytics = async (code: string) => {\r\n    const url = await UrlModel.findOne({ urlCode: code });\r\n\r\n    if (url) {\r\n        return {\r\n            originalUrl: url.originalUrl,\r\n            shortUrl: url.shortUrl,\r\n            clicks: url.clicks,\r\n            lastAccessed: url.lastAccessed,\r\n        };\r\n    }\r\n\r\n    throw new Error('URL not found');\r\n};\r\n\r\nconst generateQrCode = async (url: string): Promise<string> => {\r\n    try {\r\n        const response = await axios.get('https://api.qrserver.com/v1/create-qr-code/', {\r\n            params: {\r\n                data: encodeURIComponent(url),\r\n                size: '150x150',\r\n            },\r\n            responseType: 'arraybuffer',\r\n        });\r\n        return response.config.url as string;\r\n    } catch (error) {\r\n        console.error('Error generating QR code:', error);\r\n        throw new Error('Failed to generate QR code');\r\n    }\r\n};\r\n"]}
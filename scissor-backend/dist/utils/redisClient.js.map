{"version":3,"file":"redisClient.js","sourceRoot":"","sources":["../../src/utils/redisClient.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAmB,MAAM,OAAO,CAAC,CAAC,yBAAyB;AAChF,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,gFAAgF,CAAC;AAC3H,OAAO,CAAC,GAAG,CAAC,4BAA4B,QAAQ,EAAE,CAAC,CAAC;AAEpD,IAAI,WAAwC,CAAC;AAE7C,MAAM,iBAAiB,GAAG,GAAoB,EAAE;IAC5C,IAAI,CAAC,WAAW,EAAE,CAAC;QACf,WAAW,GAAG,YAAY,CAAC;YACvB,GAAG,EAAE,QAAQ;YACb,MAAM,EAAE;gBACJ,iBAAiB,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,EAAE,EAAE,IAAI,CAAC;aAC/D;SACJ,CAAC,CAAC;QAEH,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACnE,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,KAAK,IAAI,EAAE;IAC5B,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QACtC,IAAI,CAAC;YACD,WAAW,GAAG,iBAAiB,EAAE,CAAC;YAClC,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;QACrD,CAAC;IACL,CAAC;SAAM,CAAC;QACJ,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;IACxD,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;IAC/B,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;QACpC,IAAI,CAAC;YACD,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,GAAG,CAAC,CAAC;QAC1D,CAAC;IACL,CAAC;SAAM,CAAC;QACJ,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;IAClE,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,eAAe,EAAE,CAAC","sourcesContent":["import { createClient, RedisClientType } from 'redis'; // Import RedisClientType\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst redisUrl = process.env.REDIS_URL || 'redis://default:CntNvqNcCJwiSFHFIXcIXVOArPpapUVG@junction.proxy.rlwy.net:59640';\r\nconsole.log(`Connecting to Redis URL: ${redisUrl}`);\r\n\r\nlet redisClient: RedisClientType | undefined;\r\n\r\nconst createRedisClient = (): RedisClientType => {\r\n    if (!redisClient) {\r\n        redisClient = createClient({\r\n            url: redisUrl,\r\n            socket: {\r\n                reconnectStrategy: (retries) => Math.min(retries * 50, 2000),\r\n            },\r\n        });\r\n\r\n        redisClient.on('connect', () => console.log('Connected to Redis'));\r\n        redisClient.on('error', (err) => console.error('Redis Client Error', err));\r\n    }\r\n\r\n    return redisClient;\r\n};\r\n\r\nconst connectRedis = async () => {\r\n    if (!redisClient || !redisClient.isOpen) {\r\n        try {\r\n            redisClient = createRedisClient();\r\n            await redisClient.connect();\r\n        } catch (err) {\r\n            console.error('Failed to connect to Redis', err);\r\n        }\r\n    } else {\r\n        console.log('Redis connection already established');\r\n    }\r\n};\r\n\r\nconst disconnectRedis = async () => {\r\n    if (redisClient && redisClient.isOpen) {\r\n        try {\r\n            await redisClient.quit();\r\n            console.log('Disconnected from Redis');\r\n        } catch (err) {\r\n            console.error('Failed to disconnect from Redis', err);\r\n        }\r\n    } else {\r\n        console.log('Redis connection is not open or already closed');\r\n    }\r\n};\r\n\r\nexport { redisClient, connectRedis, disconnectRedis };\r\n"]}
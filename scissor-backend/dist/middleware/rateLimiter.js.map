{"version":3,"file":"rateLimiter.js","sourceRoot":"","sources":["../../src/middleware/rateLimiter.ts"],"names":[],"mappings":"AAAA,OAAO,SAAsC,MAAM,oBAAoB,CAAC;AACxE,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAIjE,qEAAqE;AACrE,MAAM,iBAAiB,GAAG,KAAK,IAA8B,EAAE;IAC3D,IAAI,CAAC,WAAW,EAAE,CAAC;QACf,MAAM,YAAY,EAAE,CAAC;IACzB,CAAC;IAED,2CAA2C;IAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACvD,CAAC;IAED,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC;AAEF,sBAAsB;AACtB,MAAM,OAAO,GAA4B,SAAS,CAAC;IAC/C,KAAK,EAAE,IAAI,UAAU,CAAC;QAClB,WAAW,EAAE,KAAK,EAAE,GAAG,IAAc,EAAE,EAAE;YACrC,MAAM,MAAM,GAAG,MAAM,iBAAiB,EAAE,CAAC;YACzC,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;KACJ,CAAC;IACF,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;IACvC,GAAG,EAAE,GAAG,EAAE,6CAA6C;IACvD,OAAO,EAAE,yDAAyD;IAClE,eAAe,EAAE,IAAI;IACrB,aAAa,EAAE,KAAK;IACpB,YAAY,EAAE,CAAC,GAAY,EAAU,EAAE;QACnC,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,qCAAqC;IAC9D,CAAC;CACJ,CAAC,CAAC;AAEH,0CAA0C;AAC1C,MAAM,WAAW,GAAG,CAAC,GAAW,EAAE,OAAe,EAA2B,EAAE;IAC1E,OAAO,SAAS,CAAC;QACb,KAAK,EAAE,IAAI,UAAU,CAAC;YAClB,WAAW,EAAE,KAAK,EAAE,GAAG,IAAc,EAAE,EAAE;gBACrC,MAAM,MAAM,GAAG,MAAM,iBAAiB,EAAE,CAAC;gBACzC,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;SACJ,CAAC;QACF,QAAQ,EAAE,OAAO,GAAG,EAAE,GAAG,IAAI,EAAE,2BAA2B;QAC1D,GAAG,EAAE,+CAA+C;QACpD,OAAO,EAAE,4CAA4C;QACrD,eAAe,EAAE,IAAI;QACrB,aAAa,EAAE,KAAK;QACpB,YAAY,EAAE,CAAC,GAAY,EAAU,EAAE;YACnC,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,qCAAqC;QAC9D,CAAC;KACJ,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,2DAA2D;AAC3D,MAAM,YAAY,GAAG,CAAC,GAAgB,EAAQ,EAAE;IAC5C,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,4CAA4C;IAC1E,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,2CAA2C;AACjE,CAAC,CAAC;AAEF,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import rateLimit, { RateLimitRequestHandler } from 'express-rate-limit';\r\nimport RedisStore from 'rate-limit-redis';\r\nimport { redisClient, connectRedis } from '../utils/redisClient';\r\nimport { Request, Application } from 'express';\r\nimport { RedisClientType } from 'redis'; // Import RedisClientType for type safety\r\n\r\n// Helper function to ensure redisClient is connected and initialized\r\nconst ensureRedisClient = async (): Promise<RedisClientType> => {\r\n    if (!redisClient) {\r\n        await connectRedis();\r\n    }\r\n\r\n    // After attempting to connect, check again\r\n    if (!redisClient) {\r\n        throw new Error('Redis client is not initialized');\r\n    }\r\n\r\n    return redisClient;\r\n};\r\n\r\n// Global rate limiter\r\nconst limiter: RateLimitRequestHandler = rateLimit({\r\n    store: new RedisStore({\r\n        sendCommand: async (...args: string[]) => {\r\n            const client = await ensureRedisClient();\r\n            return client.sendCommand(args);\r\n        },\r\n    }),\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 100, // limit each IP to 100 requests per windowMs\r\n    message: 'Too many requests from this IP, please try again later.',\r\n    standardHeaders: true,\r\n    legacyHeaders: false,\r\n    keyGenerator: (req: Request): string => {\r\n        return req.ip || ''; // Ensure a string is always returned\r\n    },\r\n});\r\n\r\n// Custom rate limiter for specific routes\r\nconst rateLimiter = (max: number, minutes: number): RateLimitRequestHandler => {\r\n    return rateLimit({\r\n        store: new RedisStore({\r\n            sendCommand: async (...args: string[]) => {\r\n                const client = await ensureRedisClient();\r\n                return client.sendCommand(args);\r\n            },\r\n        }),\r\n        windowMs: minutes * 60 * 1000, // custom window in minutes\r\n        max, // limit each IP to `max` requests per windowMs\r\n        message: 'Too many requests, please try again later.',\r\n        standardHeaders: true,\r\n        legacyHeaders: false,\r\n        keyGenerator: (req: Request): string => {\r\n            return req.ip || ''; // Ensure a string is always returned\r\n        },\r\n    });\r\n};\r\n\r\n// Function to configure the global rate limiter on the app\r\nconst configureApp = (app: Application): void => {\r\n    app.set('trust proxy', true); // Ensure the trust proxy setting is enabled\r\n    app.use(limiter); // Apply the global rate limiter middleware\r\n};\r\n\r\nexport { limiter, configureApp, rateLimiter };\r\n"]}
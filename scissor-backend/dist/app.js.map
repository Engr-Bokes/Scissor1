{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAC3C,OAAO,UAAU,MAAM,qBAAqB,CAAC;AAC7C,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC,CAAC,mCAAmC;AACvF,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAEjE,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AAEtB,YAAY,CAAC,GAAG,CAAC,CAAC;AAElB,mBAAmB;AACnB,YAAY,EAAE,CAAC;AAEf,MAAM,WAAW,GAAG;IAChB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,uBAAuB,EAAE,oCAAoC;IACjG,oBAAoB,EAAE,GAAG;CAC5B,CAAC;AAEF,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,yCAAyC;AAE3D,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,+HAA+H,CAAC;AAE5K,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE;IACvB,wBAAwB,EAAE,KAAK,EAAE,qBAAqB;IACtD,eAAe,EAAE,KAAK,EAAE,4BAA4B;CACvD,CAAC;KACG,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;KAC/C,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC,CAAC;AAErE,aAAa;AACb,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AAE7B,4BAA4B;AAC5B,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,IAAqB,EAAE,GAAqB,EAAE,KAA2B,EAAE,EAAE;IAC5F,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;IAC/C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;AAC1E,CAAC,CAAC,CAAC;AAEH,eAAe;AACf,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC;AAEH,eAAe,GAAG,CAAC","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\nimport urlRoutes from './routes/urlRoutes';\r\nimport authRoutes from './routes/authRoutes';\r\nimport mongoose from 'mongoose';\r\nimport dotenv from 'dotenv';\r\nimport { connectRedis } from './utils/redisClient'; // Import the connectRedis function\r\nimport { limiter, configureApp } from './middleware/rateLimiter';\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\n\r\nconfigureApp(app);\r\n\r\n// Connect to Redis\r\nconnectRedis();\r\n\r\nconst corsOptions = {\r\n    origin: process.env.FRONTEND_URL || 'http://localhost:3000', // Use env variable for frontend URL\r\n    optionsSuccessStatus: 200,\r\n};\r\n\r\napp.use(cors(corsOptions));\r\napp.use(bodyParser.json());\r\napp.use(limiter); // Apply rate limiter middleware globally\r\n\r\nconst mongoUri = process.env.MONGODB_URI || 'mongodb+srv://Chibuokem:BokesCrush1@firstcluster.mfzoh4u.mongodb.net/scissor?retryWrites=true&w=majority&appName=FirstCluster';\r\n\r\nmongoose.connect(mongoUri, {\r\n    serverSelectionTimeoutMS: 30000, // 30 seconds timeout\r\n    socketTimeoutMS: 45000, // 45 seconds socket timeout\r\n})\r\n    .then(() => console.log('Connected to MongoDB'))\r\n    .catch((err) => console.error('MongoDB connection error:', err));\r\n\r\n// API Routes\r\napp.use('/api', urlRoutes);\r\napp.use('/auth', authRoutes);\r\n\r\n// Error handling middleware\r\napp.use((err: any, _req: express.Request, res: express.Response, _next: express.NextFunction) => {\r\n    console.error('An error occurred:', err.stack);\r\n    res.status(500).json({ message: 'Server Error', error: err.message });\r\n});\r\n\r\n// 404 Handling\r\napp.use((_req, res, _next) => {\r\n    res.status(404).json({ message: 'Route not found' });\r\n});\r\n\r\nexport default app;\r\n"]}
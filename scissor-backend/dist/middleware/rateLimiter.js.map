{"version":3,"file":"rateLimiter.js","sourceRoot":"","sources":["../../src/middleware/rateLimiter.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAC3C,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAEjE,6DAA6D;AAC7D,MAAM,oBAAoB,GAAG,KAAK,IAAI,EAAE;IACtC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QACxB,MAAM,YAAY,EAAE,CAAC;IACvB,CAAC;AACH,CAAC,CAAC;AAEF,CAAC,KAAK,IAAI,EAAE;IACR,MAAM,oBAAoB,EAAE,CAAC;AAC/B,CAAC,CAAC,EAAE,CAAC;AAEP,MAAM,OAAO,GAAG,SAAS,CAAC;IACxB,KAAK,EAAE,IAAI,UAAU,CAAC;QACpB,WAAW,EAAE,CAAC,GAAG,IAAW,EAAE,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC;KAC/D,CAAQ,EAAE,6FAA6F;IACxG,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;IACvC,GAAG,EAAE,GAAG,EAAE,6CAA6C;IACvD,OAAO,EAAE,yDAAyD;IAClE,eAAe,EAAE,IAAI,EAAE,sDAAsD;IAC7E,aAAa,EAAE,KAAK,EAAE,sCAAsC;CAC7D,CAAC,CAAC;AAEH,eAAe,OAAO,CAAC","sourcesContent":["import rateLimit from 'express-rate-limit';\r\nimport RedisStore from 'rate-limit-redis';\r\nimport { redisClient, connectRedis } from '../utils/redisClient';\r\n\r\n// Ensure Redis is connected before creating the rate limiter\r\nconst ensureRedisConnected = async () => {\r\n  if (!redisClient.isOpen) {\r\n    await connectRedis();\r\n  }\r\n};\r\n\r\n(async () => {\r\n    await ensureRedisConnected();\r\n  })();\r\n\r\nconst limiter = rateLimit({\r\n  store: new RedisStore({\r\n    sendCommand: (...args: any[]) => redisClient.sendCommand(args),\r\n  }) as any, // Type assertion to 'any' since express-rate-limit and rate-limit-redis typings may conflict\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100, // Limit each IP to 100 requests per windowMs\r\n  message: 'Too many requests from this IP, please try again later.',\r\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n\r\nexport default limiter;\r\n"]}
{"version":3,"file":"authMiddleware.js","sourceRoot":"","sources":["../../src/middleware/authMiddleware.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAQhD,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,GAAyB,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACjG,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvD,IAAI,CAAC,KAAK,EAAE,CAAC;QACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,yCAAyC,EAAE,CAAC,CAAC;IACxF,CAAC;IAED,IAAI,CAAC;QACD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAgC,CAAC;QAElE,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAElD,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,sCAAsC,EAAE,CAAC,CAAC;QACrF,CAAC;QAED,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,EAAE,CAAC;IACX,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC;IACnE,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { verifyToken } from '../utils/jwtHelper';\r\nimport { UserModel } from '../models/userModel';\r\nimport { JwtPayload } from 'jsonwebtoken';\r\n\r\n// Extending Express's Request interface to include the `user` property\r\ninterface AuthenticatedRequest extends Request {\r\n    user?: typeof UserModel.prototype;\r\n}\r\n\r\nexport const authMiddleware = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\r\n    const token = req.headers.authorization?.split(' ')[1];\r\n\r\n    if (!token) {\r\n        return res.status(401).json({ message: 'No token provided, authorization denied' });\r\n    }\r\n\r\n    try {\r\n        const decoded = verifyToken(token) as JwtPayload & { id: string };\r\n\r\n        const user = await UserModel.findById(decoded.id);\r\n\r\n        if (!user) {\r\n            return res.status(401).json({ message: 'User not found, authorization denied' });\r\n        }\r\n\r\n        req.user = user;\r\n        next();\r\n    } catch (error) {\r\n        return res.status(401).json({ message: 'Token is not valid' });\r\n    }\r\n};\r\n"]}
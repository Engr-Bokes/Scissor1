{"version":3,"file":"urlController.test.js","sourceRoot":"","sources":["../../src/__tests__/urlController.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from 'supertest';\r\nimport app from '../app';\r\nimport mongoose from 'mongoose';\r\nimport { disconnectRedis, connectRedis } from '../utils/redisClient';\r\nimport jwt from 'jsonwebtoken';\r\nimport { UrlModel } from '../models/urlModel';\r\nimport { UserModel, IUser } from '../models/userModel';\r\n\r\n// Set timeout for Jest\r\njest.setTimeout(60000); // 60 seconds timeout\r\n\r\n// Function to generate JWT token for authenticated requests\r\nconst generateAuthToken = (userId: string) => {\r\n  const payload = { id: userId };\r\n  return jwt.sign(payload, process.env.JWT_SECRET as string, { expiresIn: '1h' });\r\n};\r\n\r\n// Run before all tests - setup Redis and MongoDB connections\r\nbeforeAll(async () => {\r\n  if (!mongoose.connection.readyState) {\r\n    await mongoose.connect(process.env.MONGO_URI as string); // Ensure MongoDB is connected\r\n  }\r\n  await connectRedis(); // Ensure Redis is connected\r\n\r\n  // Clean up the database before starting the tests\r\n  const collections = mongoose.connection.collections;\r\n  for (const key in collections) {\r\n    await collections[key].deleteMany({});\r\n  }\r\n});\r\n\r\n// Run after all tests - clean up and close connections\r\nafterAll(async () => {\r\n  // Clean up the database after tests\r\n  const collections = mongoose.connection.collections;\r\n  for (const key in collections) {\r\n    await collections[key].deleteMany({});\r\n  }\r\n  \r\n  await mongoose.connection.close();\r\n  await disconnectRedis(); // Gracefully close Redis connection\r\n});\r\n\r\ndescribe('URL Shortening API', () => {\r\n  let testUserId: string;\r\n  let authToken: string;\r\n\r\n  beforeAll(async () => {\r\n    const testUser: IUser = new UserModel({ \r\n      username: 'testuser',\r\n      email: `test+${Date.now()}@example.com`, // Use a unique email for each test run\r\n      password: 'password' \r\n    });\r\n    await testUser.save();\r\n    testUserId = testUser._id.toString(); // Convert ObjectId to string\r\n    authToken = generateAuthToken(testUserId);\r\n  });\r\n\r\n  it('should shorten a URL and return a QR code', async () => {\r\n    const response = await request(app)\r\n      .post('/api/shorten')\r\n      .set('Authorization', `Bearer ${authToken}`)\r\n      .send({ originalUrl: 'https://example.com' });\r\n\r\n    expect(response.status).toBe(201);\r\n    expect(response.body).toHaveProperty('shortUrl');\r\n    expect(response.body).toHaveProperty('qrCode');\r\n\r\n    const urlInDb = await UrlModel.findOne({ shortUrl: response.body.shortUrl });\r\n    expect(urlInDb).not.toBeNull();\r\n    expect(urlInDb?.originalUrl).toBe('https://example.com');\r\n    expect(urlInDb?.user.toString()).toBe(testUserId);\r\n  });\r\n\r\n  it('should return 400 for an invalid URL', async () => {\r\n    const response = await request(app)\r\n      .post('/api/shorten')\r\n      .set('Authorization', `Bearer ${authToken}`)\r\n      .send({ originalUrl: 'invalid-url' });\r\n\r\n    expect(response.status).toBe(400);\r\n    expect(response.body.message).toBe('Invalid URL');\r\n  });\r\n\r\n  it('should return 401 for unauthorized access', async () => {\r\n    const response = await request(app)\r\n      .post('/api/shorten')\r\n      .send({ originalUrl: 'https://example.com' });\r\n\r\n    expect(response.status).toBe(401);\r\n    expect(response.body.message).toBe('No token provided, authorization denied');\r\n  });\r\n\r\n  it('should fetch URL analytics for a valid code', async () => {\r\n    const url = new UrlModel({\r\n      originalUrl: 'https://example.com',\r\n      shortUrl: 'http://localhost:8000/testcode',\r\n      urlCode: 'testcode',\r\n      user: testUserId,\r\n    });\r\n    await url.save();\r\n\r\n    const response = await request(app)\r\n      .get(`/api/testcode/analytics`)\r\n      .set('Authorization', `Bearer ${authToken}`);\r\n\r\n    expect(response.status).toBe(200);\r\n    expect(response.body).toHaveProperty('originalUrl', 'https://example.com');\r\n    expect(response.body).toHaveProperty('shortUrl', 'http://localhost:8000/testcode');\r\n    expect(response.body).toHaveProperty('clicks', 0);\r\n  });\r\n});\r\n"]}